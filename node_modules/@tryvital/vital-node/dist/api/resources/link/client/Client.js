"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Link = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const Vital = __importStar(require("../../.."));
const serializers = __importStar(require("../../../../serialization"));
const url_join_1 = __importDefault(require("url-join"));
const errors = __importStar(require("../../../../errors"));
class Link {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * Endpoint to generate a user link token, to be used throughout the vital
     * link process. The vital link token is a one time use token, that
     * expires after 10 minutes. If you would like vital-link widget to launch
     * with a specific provider, pass in a provider in the body. If you would
     * like to redirect to a custom url after successful or error connection,
     * pass in your own custom redirect_url parameter.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    token(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, "v2/link/token"),
                method: "POST",
                headers: {
                    "x-vital-api-key": yield core.Supplier.get(this._options.apiKey),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@tryvital/vital-node",
                    "X-Fern-SDK-Version": "3.1.2",
                },
                contentType: "application/json",
                body: yield serializers.LinkTokenExchange.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            });
            if (_response.ok) {
                return yield serializers.LinkTokenExchangeResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.VitalError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.VitalError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.VitalTimeoutError();
                case "unknown":
                    throw new errors.VitalError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     */
    isTokenValid(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, "v2/link/token/isValid"),
                method: "POST",
                headers: {
                    "x-vital-api-key": yield core.Supplier.get(this._options.apiKey),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@tryvital/vital-node",
                    "X-Fern-SDK-Version": "3.1.2",
                },
                contentType: "application/json",
                body: yield serializers.LinkTokenBase.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            });
            if (_response.ok) {
                return yield serializers.link.isTokenValid.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.VitalError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.VitalError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.VitalTimeoutError();
                case "unknown":
                    throw new errors.VitalError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Generate a token to invite a user of Vital mobile app to your team
     * @throws {@link Vital.UnprocessableEntityError}
     */
    codeCreate(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { userId, expiresAt } = request;
            const _queryParams = {};
            _queryParams["user_id"] = userId;
            if (expiresAt != null) {
                _queryParams["expires_at"] = expiresAt.toISOString();
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, "v2/link/code/create"),
                method: "POST",
                headers: {
                    "x-vital-api-key": yield core.Supplier.get(this._options.apiKey),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@tryvital/vital-node",
                    "X-Fern-SDK-Version": "3.1.2",
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            });
            if (_response.ok) {
                return yield serializers.VitalTokenCreatedResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.VitalError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.VitalError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.VitalTimeoutError();
                case "unknown":
                    throw new errors.VitalError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * REQUEST_SOURCE: VITAL-LINK
     * Start link token process
     * @throws {@link Vital.UnprocessableEntityError}
     */
    startConnect(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, "v2/link/start"),
                method: "POST",
                headers: {
                    "x-vital-api-key": yield core.Supplier.get(this._options.apiKey),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@tryvital/vital-node",
                    "X-Fern-SDK-Version": "3.1.2",
                },
                contentType: "application/json",
                body: yield serializers.BeginLinkTokenRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            });
            if (_response.ok) {
                return yield serializers.link.startConnect.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.VitalError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.VitalError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.VitalTimeoutError();
                case "unknown":
                    throw new errors.VitalError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * REQUEST_SOURCE: VITAL-LINK
     * Check link token state - can be hit continuously used as heartbeat
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.link.tokenState({})
     */
    tokenState(request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { vitalLinkToken } = request;
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, "v2/link/state"),
                method: "GET",
                headers: {
                    "x-vital-api-key": yield core.Supplier.get(this._options.apiKey),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@tryvital/vital-node",
                    "X-Fern-SDK-Version": "3.1.2",
                    "x-vital-link-token": vitalLinkToken != null ? vitalLinkToken : undefined,
                },
                contentType: "application/json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            });
            if (_response.ok) {
                return yield serializers.link.tokenState.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.VitalError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.VitalError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.VitalTimeoutError();
                case "unknown":
                    throw new errors.VitalError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * REQUEST_SOURCE: VITAL-LINK
     * PROVIDER_TYPE: EMAIL-AUTH
     * This function is hit by vital-link to authenticate a email provider.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    emailAuth(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { vitalLinkToken } = request, _body = __rest(request, ["vitalLinkToken"]);
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, "v2/link/auth/email"),
                method: "POST",
                headers: {
                    "x-vital-api-key": yield core.Supplier.get(this._options.apiKey),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@tryvital/vital-node",
                    "X-Fern-SDK-Version": "3.1.2",
                    "x-vital-link-token": vitalLinkToken != null ? vitalLinkToken : undefined,
                },
                contentType: "application/json",
                body: yield serializers.EmailAuthLink.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            });
            if (_response.ok) {
                return yield serializers.ConnectionStatus.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.VitalError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.VitalError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.VitalTimeoutError();
                case "unknown":
                    throw new errors.VitalError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * REQUEST_SOURCE: VITAL-LINK
     * PROVIDER_TYPE: PASSWORD-AUTH
     * This function is hit by vital-link to authenticate a password provider.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    passwordAuth(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { vitalLinkClientRegion, vitalLinkToken } = request, _body = __rest(request, ["vitalLinkClientRegion", "vitalLinkToken"]);
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, "v2/link/auth"),
                method: "POST",
                headers: {
                    "x-vital-api-key": yield core.Supplier.get(this._options.apiKey),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@tryvital/vital-node",
                    "X-Fern-SDK-Version": "3.1.2",
                    "x-vital-link-client-region": vitalLinkClientRegion != null ? vitalLinkClientRegion : undefined,
                    "x-vital-link-token": vitalLinkToken != null ? vitalLinkToken : undefined,
                },
                contentType: "application/json",
                body: yield serializers.PasswordAuthLink.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            });
            if (_response.ok) {
                return yield serializers.ConnectionStatus.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.VitalError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.VitalError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.VitalTimeoutError();
                case "unknown":
                    throw new errors.VitalError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * This endpoint generates an OAuth link for oauth provider
     * @throws {@link Vital.UnprocessableEntityError}
     */
    generateOauthLink(oauthProvider, request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { vitalLinkToken } = request;
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/link/provider/oauth/${yield serializers.OAuthProviders.jsonOrThrow(oauthProvider)}`),
                method: "GET",
                headers: {
                    "x-vital-api-key": yield core.Supplier.get(this._options.apiKey),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@tryvital/vital-node",
                    "X-Fern-SDK-Version": "3.1.2",
                    "x-vital-link-token": vitalLinkToken != null ? vitalLinkToken : undefined,
                },
                contentType: "application/json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            });
            if (_response.ok) {
                return yield serializers.Source.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.VitalError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.VitalError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.VitalTimeoutError();
                case "unknown":
                    throw new errors.VitalError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * This connects auth providers that are password based.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    connectPasswordProvider(provider, request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { vitalLinkClientRegion, vitalLinkToken } = request, _body = __rest(request, ["vitalLinkClientRegion", "vitalLinkToken"]);
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/link/provider/password/${yield serializers.PasswordProviders.jsonOrThrow(provider)}`),
                method: "POST",
                headers: {
                    "x-vital-api-key": yield core.Supplier.get(this._options.apiKey),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@tryvital/vital-node",
                    "X-Fern-SDK-Version": "3.1.2",
                    "x-vital-link-client-region": vitalLinkClientRegion != null ? vitalLinkClientRegion : undefined,
                    "x-vital-link-token": vitalLinkToken != null ? vitalLinkToken : undefined,
                },
                contentType: "application/json",
                body: yield serializers.IndividualProviderData.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            });
            if (_response.ok) {
                return yield serializers.ProviderLinkResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.VitalError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.VitalError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.VitalTimeoutError();
                case "unknown":
                    throw new errors.VitalError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * This connects auth providers that are email based.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    connectEmailAuthProvider(provider, request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { vitalLinkToken } = request, _body = __rest(request, ["vitalLinkToken"]);
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/link/provider/email/${yield serializers.EmailProviders.jsonOrThrow(provider)}`),
                method: "POST",
                headers: {
                    "x-vital-api-key": yield core.Supplier.get(this._options.apiKey),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@tryvital/vital-node",
                    "X-Fern-SDK-Version": "3.1.2",
                    "x-vital-link-token": vitalLinkToken != null ? vitalLinkToken : undefined,
                },
                contentType: "application/json",
                body: yield serializers.EmailProviderAuthLink.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            });
            if (_response.ok) {
                return yield serializers.ConnectionStatus.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.VitalError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.VitalError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.VitalTimeoutError();
                case "unknown":
                    throw new errors.VitalError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * GET List of all available providers given the generated link token.
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.link.getAllProviders({})
     */
    getAllProviders(request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { vitalLinkToken } = request;
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, "v2/link/providers"),
                method: "GET",
                headers: {
                    "x-vital-api-key": yield core.Supplier.get(this._options.apiKey),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@tryvital/vital-node",
                    "X-Fern-SDK-Version": "3.1.2",
                    "x-vital-link-token": vitalLinkToken != null ? vitalLinkToken : undefined,
                },
                contentType: "application/json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            });
            if (_response.ok) {
                return yield serializers.link.getAllProviders.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.VitalError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.VitalError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.VitalTimeoutError();
                case "unknown":
                    throw new errors.VitalError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * REQUEST_SOURCE: CUSTOMER
     * PROVIDER_TYPE: MANUAL-PROVIDER
     * This connects auth providers that are password based.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    connectManualProvider(provider, request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/link/provider/manual/${yield serializers.ManualProviders.jsonOrThrow(provider)}`),
                method: "POST",
                headers: {
                    "x-vital-api-key": yield core.Supplier.get(this._options.apiKey),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@tryvital/vital-node",
                    "X-Fern-SDK-Version": "3.1.2",
                },
                contentType: "application/json",
                body: yield serializers.ManualConnectionData.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            });
            if (_response.ok) {
                return yield serializers.link.connectManualProvider.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.VitalError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.VitalError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.VitalTimeoutError();
                case "unknown":
                    throw new errors.VitalError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * POST Connect the given Vital user to a demo provider.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    connectDemoProvider(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, "v2/link/connect/demo"),
                method: "POST",
                headers: {
                    "x-vital-api-key": yield core.Supplier.get(this._options.apiKey),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@tryvital/vital-node",
                    "X-Fern-SDK-Version": "3.1.2",
                },
                contentType: "application/json",
                body: yield serializers.DemoConnectionCreationPayload.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            });
            if (_response.ok) {
                return yield serializers.DemoConnectionStatus.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }));
                    default:
                        throw new errors.VitalError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.VitalError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.VitalTimeoutError();
                case "unknown":
                    throw new errors.VitalError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
}
exports.Link = Link;
