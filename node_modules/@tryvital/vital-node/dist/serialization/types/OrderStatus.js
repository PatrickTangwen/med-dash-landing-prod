"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderStatus = void 0;
const core = __importStar(require("../../core"));
exports.OrderStatus = core.serialization.enum_([
    "received.walk_in_test.ordered",
    "received.walk_in_test.requisition_created",
    "completed.walk_in_test.completed",
    "sample_with_lab.walk_in_test.partial_results",
    "failed.walk_in_test.sample_error",
    "cancelled.walk_in_test.cancelled",
    "received.at_home_phlebotomy.ordered",
    "received.at_home_phlebotomy.requisition_created",
    "collecting_sample.at_home_phlebotomy.appointment_pending",
    "collecting_sample.at_home_phlebotomy.appointment_scheduled",
    "collecting_sample.at_home_phlebotomy.draw_completed",
    "collecting_sample.at_home_phlebotomy.appointment_cancelled",
    "completed.at_home_phlebotomy.completed",
    "sample_with_lab.at_home_phlebotomy.partial_results",
    "cancelled.at_home_phlebotomy.cancelled",
    "received.testkit.ordered",
    "received.testkit.awaiting_registration",
    "received.testkit.requisition_created",
    "received.testkit.registered",
    "collecting_sample.testkit.transit_customer",
    "collecting_sample.testkit.out_for_delivery",
    "collecting_sample.testkit.with_customer",
    "collecting_sample.testkit.transit_lab",
    "sample_with_lab.testkit.delivered_to_lab",
    "completed.testkit.completed",
    "failed.testkit.failure_to_deliver_to_customer",
    "failed.testkit.failure_to_deliver_to_lab",
    "failed.testkit.sample_error",
    "failed.testkit.lost",
    "cancelled.testkit.cancelled",
    "cancelled.testkit.do_not_process",
]);
