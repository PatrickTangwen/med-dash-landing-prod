/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vital from "../../..";
export declare namespace Link {
    interface Options {
        environment?: core.Supplier<environments.VitalEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Link {
    protected readonly _options: Link.Options;
    constructor(_options: Link.Options);
    /**
     * Endpoint to generate a user link token, to be used throughout the vital
     * link process. The vital link token is a one time use token, that
     * expires after 10 minutes. If you would like vital-link widget to launch
     * with a specific provider, pass in a provider in the body. If you would
     * like to redirect to a custom url after successful or error connection,
     * pass in your own custom redirect_url parameter.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    token(request: Vital.LinkTokenExchange, requestOptions?: Link.RequestOptions): Promise<Vital.LinkTokenExchangeResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     */
    isTokenValid(request: Vital.LinkTokenBase, requestOptions?: Link.RequestOptions): Promise<Record<string, unknown>>;
    /**
     * Generate a token to invite a user of Vital mobile app to your team
     * @throws {@link Vital.UnprocessableEntityError}
     */
    codeCreate(request: Vital.LinkCodeCreateRequest, requestOptions?: Link.RequestOptions): Promise<Vital.VitalTokenCreatedResponse>;
    /**
     * REQUEST_SOURCE: VITAL-LINK
     * Start link token process
     * @throws {@link Vital.UnprocessableEntityError}
     */
    startConnect(request: Vital.BeginLinkTokenRequest, requestOptions?: Link.RequestOptions): Promise<Record<string, unknown>>;
    /**
     * REQUEST_SOURCE: VITAL-LINK
     * Check link token state - can be hit continuously used as heartbeat
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.link.tokenState({})
     */
    tokenState(request?: Vital.LinkTokenStateRequest, requestOptions?: Link.RequestOptions): Promise<Record<string, unknown>>;
    /**
     * REQUEST_SOURCE: VITAL-LINK
     * PROVIDER_TYPE: EMAIL-AUTH
     * This function is hit by vital-link to authenticate a email provider.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    emailAuth(request: Vital.EmailAuthLink, requestOptions?: Link.RequestOptions): Promise<Vital.ConnectionStatus>;
    /**
     * REQUEST_SOURCE: VITAL-LINK
     * PROVIDER_TYPE: PASSWORD-AUTH
     * This function is hit by vital-link to authenticate a password provider.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    passwordAuth(request: Vital.PasswordAuthLink, requestOptions?: Link.RequestOptions): Promise<Vital.ConnectionStatus>;
    /**
     * This endpoint generates an OAuth link for oauth provider
     * @throws {@link Vital.UnprocessableEntityError}
     */
    generateOauthLink(oauthProvider: Vital.OAuthProviders, request?: Vital.LinkGenerateOauthLinkRequest, requestOptions?: Link.RequestOptions): Promise<Vital.Source>;
    /**
     * This connects auth providers that are password based.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    connectPasswordProvider(provider: Vital.PasswordProviders, request: Vital.IndividualProviderData, requestOptions?: Link.RequestOptions): Promise<Vital.ProviderLinkResponse>;
    /**
     * This connects auth providers that are email based.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    connectEmailAuthProvider(provider: Vital.EmailProviders, request: Vital.EmailProviderAuthLink, requestOptions?: Link.RequestOptions): Promise<Vital.ConnectionStatus>;
    /**
     * GET List of all available providers given the generated link token.
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.link.getAllProviders({})
     */
    getAllProviders(request?: Vital.LinkGetAllProvidersRequest, requestOptions?: Link.RequestOptions): Promise<Vital.SourceLink[]>;
    /**
     * REQUEST_SOURCE: CUSTOMER
     * PROVIDER_TYPE: MANUAL-PROVIDER
     * This connects auth providers that are password based.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    connectManualProvider(provider: Vital.ManualProviders, request: Vital.ManualConnectionData, requestOptions?: Link.RequestOptions): Promise<Record<string, boolean>>;
    /**
     * POST Connect the given Vital user to a demo provider.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    connectDemoProvider(request: Vital.DemoConnectionCreationPayload, requestOptions?: Link.RequestOptions): Promise<Vital.DemoConnectionStatus>;
}
