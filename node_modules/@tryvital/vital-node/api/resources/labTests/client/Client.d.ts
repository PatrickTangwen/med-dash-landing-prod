/**
 * This file was auto-generated by Fern from our API Definition.
 */
/// <reference types="node" />
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vital from "../../..";
import * as stream from "stream";
export declare namespace LabTests {
    interface Options {
        environment?: core.Supplier<environments.VitalEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class LabTests {
    protected readonly _options: LabTests.Options;
    constructor(_options: LabTests.Options);
    /**
     * GET all the lab tests the team has access to.
     *
     * @example
     *     await vital.labTests.get()
     */
    get(requestOptions?: LabTests.RequestOptions): Promise<Vital.ClientFacingLabTest[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     */
    create(request: Vital.CreateLabTestRequest, requestOptions?: LabTests.RequestOptions): Promise<Vital.ClientFacingLabTest>;
    /**
     * GET all the markers for the given lab.
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.labTests.getMarkers({})
     */
    getMarkers(request?: Vital.LabTestsGetMarkersRequest, requestOptions?: LabTests.RequestOptions): Promise<Vital.GetMarkersResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.labTests.getMarkersForLabTest("lab-test-id", {})
     */
    getMarkersForLabTest(labTestId: string, request?: Vital.LabTestsGetMarkersForLabTestRequest, requestOptions?: LabTests.RequestOptions): Promise<Vital.GetMarkersResponse>;
    /**
     * GET a specific marker for the given lab and provider_id
     * @throws {@link Vital.UnprocessableEntityError}
     */
    getMarkersByLabAndProviderId(providerId: string, labId: number, requestOptions?: LabTests.RequestOptions): Promise<Vital.ClientFacingMarker>;
    /**
     * GET all the labs.
     *
     * @example
     *     await vital.labTests.getLabs()
     */
    getLabs(requestOptions?: LabTests.RequestOptions): Promise<Vital.ClientFacingLab[]>;
    /**
     * GET all the lab tests the team has access to.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    getById(labTestId: string, requestOptions?: LabTests.RequestOptions): Promise<Vital.ClientFacingLabTest>;
    /**
     * Return the available time slots to book an appointment with a phlebotomist
     * for the given address and order.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    getPhlebotomyAppointmentAvailability(request: Vital.UsAddress, requestOptions?: LabTests.RequestOptions): Promise<Vital.AppointmentAvailabilitySlots>;
    /**
     * Book an at-home phlebotomy appointment.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    bookPhlebotomyAppointment(orderId: string, request: Vital.AppointmentBookingRequest, requestOptions?: LabTests.RequestOptions): Promise<Vital.ClientFacingAppointment>;
    /**
     * Request an at-home phlebotomy appointment.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    requestPhlebotomyAppointment(orderId: string, request: Vital.RequestAppointmentRequest, requestOptions?: LabTests.RequestOptions): Promise<Vital.ClientFacingAppointment>;
    /**
     * Reschedule a previously booked at-home phlebotomy appointment.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    reschedulePhlebotomyAppointment(orderId: string, request: Vital.AppointmentRescheduleRequest, requestOptions?: LabTests.RequestOptions): Promise<Vital.ClientFacingAppointment>;
    /**
     * Cancel a previously booked at-home phlebotomy appointment.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    cancelPhlebotomyAppointment(orderId: string, request: Vital.AppointmentCancelRequest, requestOptions?: LabTests.RequestOptions): Promise<Vital.ClientFacingAppointment>;
    /**
     * Get the list of reasons for cancelling an at-home phlebotomy appointment.
     *
     * @example
     *     await vital.labTests.getPhlebotomyAppointmentCancellationReason()
     */
    getPhlebotomyAppointmentCancellationReason(requestOptions?: LabTests.RequestOptions): Promise<Vital.ClientFacingAppointmentCancellationReason[]>;
    /**
     * Get the appointment associated with an order.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    getPhlebotomyAppointment(orderId: string, requestOptions?: LabTests.RequestOptions): Promise<Vital.ClientFacingAppointment>;
    /**
     * GET information about an area with respect to lab-testing.
     *
     * Information returned:
     *
     * - Whether a given zip code is served by our Phlebotomy network.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    getAreaInfo(request: Vital.LabTestsGetAreaInfoRequest, requestOptions?: LabTests.RequestOptions): Promise<Vital.AreaInfo>;
    /**
     * This endpoint returns the lab results for the order.
     */
    getResultPdf(orderId: string, requestOptions?: LabTests.RequestOptions): Promise<stream.Readable>;
    /**
     * Return metadata related to order results, such as lab metadata,
     * provider and sample dates.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    getResultMetadata(orderId: string, requestOptions?: LabTests.RequestOptions): Promise<Vital.LabResultsMetadata>;
    /**
     * Return both metadata and raw json test data
     * @throws {@link Vital.UnprocessableEntityError}
     */
    getResultRaw(orderId: string, requestOptions?: LabTests.RequestOptions): Promise<Vital.LabResultsRaw>;
    /**
     * GET requisition pdf for an order
     */
    getOrderRequistionPdf(orderId: string, requestOptions?: LabTests.RequestOptions): Promise<stream.Readable>;
    /**
     * GET individual order by ID.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    getOrder(orderId: string, requestOptions?: LabTests.RequestOptions): Promise<Vital.ClientFacingOrder>;
    /**
     * POST create new order
     * @throws {@link Vital.UnprocessableEntityError}
     */
    createOrder(request: Vital.CreateOrderRequestCompatible, requestOptions?: LabTests.RequestOptions): Promise<Vital.PostOrderResponse>;
    /**
     * POST cancel order
     * @throws {@link Vital.UnprocessableEntityError}
     */
    cancelOrder(orderId: string, requestOptions?: LabTests.RequestOptions): Promise<Vital.PostOrderResponse>;
    /**
     * Get available test kits.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    simulateOrderProcess(orderId: string, request?: Vital.LabTestsSimulateOrderProcessRequest, requestOptions?: LabTests.RequestOptions): Promise<unknown>;
    /**
     * GET many orders with filters.
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.labTests.getOrders({})
     */
    getOrders(request?: Vital.LabTestsGetOrdersRequest, requestOptions?: LabTests.RequestOptions): Promise<Vital.GetOrdersResponse>;
}
