/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vital from "../../..";
export declare namespace Insurance {
    interface Options {
        environment?: core.Supplier<environments.VitalEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Insurance {
    protected readonly _options: Insurance.Options;
    constructor(_options: Insurance.Options);
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     */
    searchPayorInfo(request: Vital.PayorSearchRequest, requestOptions?: Insurance.RequestOptions): Promise<Vital.ClientFacingPayorSearchResponse[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.insurance.searchDiagnosis({
     *         diagnosisQuery: "diagnosis-query"
     *     })
     */
    searchDiagnosis(request: Vital.InsuranceSearchDiagnosisRequest, requestOptions?: Insurance.RequestOptions): Promise<Vital.ClientFacingDiagnosisInformation[]>;
}
