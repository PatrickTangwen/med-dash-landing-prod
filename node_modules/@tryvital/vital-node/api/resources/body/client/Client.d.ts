/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vital from "../../..";
export declare namespace Body {
    interface Options {
        environment?: core.Supplier<environments.VitalEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Body {
    protected readonly _options: Body.Options;
    constructor(_options: Body.Options);
    /**
     * Get Daily Body data for user_id
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.body.get("user-id", {
     *         startDate: "start-date"
     *     })
     */
    get(userId: string, request: Vital.BodyGetRequest, requestOptions?: Body.RequestOptions): Promise<Vital.ClientBodyResponse>;
    /**
     * Get Daily Body data for user_id
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.body.getRaw("user-id", {
     *         startDate: "start-date"
     *     })
     */
    getRaw(userId: string, request: Vital.BodyGetRawRequest, requestOptions?: Body.RequestOptions): Promise<Vital.RawBody>;
}
