/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vital from "../../..";
export declare namespace Vitals {
    interface Options {
        environment?: core.Supplier<environments.VitalEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Vitals {
    protected readonly _options: Vitals.Options;
    constructor(_options: Vitals.Options);
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.vo2MaxGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    vo2MaxGrouped(userId: string, request: Vital.VitalsVo2MaxGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedVo2MaxResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.stressLevelGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    stressLevelGrouped(userId: string, request: Vital.VitalsStressLevelGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedStressLevelResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.mindfulnessMinutesGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    mindfulnessMinutesGrouped(userId: string, request: Vital.VitalsMindfulnessMinutesGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedMindfulnessMinutesResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.caffeineGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    caffeineGrouped(userId: string, request: Vital.VitalsCaffeineGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedCaffeineResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.waterGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    waterGrouped(userId: string, request: Vital.VitalsWaterGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedWaterResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.stepsGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    stepsGrouped(userId: string, request: Vital.VitalsStepsGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedStepsResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.floorsClimbedGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    floorsClimbedGrouped(userId: string, request: Vital.VitalsFloorsClimbedGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedFloorsClimbedResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.distanceGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    distanceGrouped(userId: string, request: Vital.VitalsDistanceGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedDistanceResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.caloriesBasalGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    caloriesBasalGrouped(userId: string, request: Vital.VitalsCaloriesBasalGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedCaloriesBasalResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.caloriesActiveGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    caloriesActiveGrouped(userId: string, request: Vital.VitalsCaloriesActiveGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedCaloriesActiveResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.respiratoryRateGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    respiratoryRateGrouped(userId: string, request: Vital.VitalsRespiratoryRateGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedRespiratoryRateResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.igeGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    igeGrouped(userId: string, request: Vital.VitalsIgeGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedIgeResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.iggGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    iggGrouped(userId: string, request: Vital.VitalsIggGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedIggResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.hypnogramGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    hypnogramGrouped(userId: string, request: Vital.VitalsHypnogramGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedHypnogramResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.hrvGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    hrvGrouped(userId: string, request: Vital.VitalsHrvGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedHrvResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.heartrateGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    heartrateGrouped(userId: string, request: Vital.VitalsHeartrateGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedHeartRateResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.glucoseGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    glucoseGrouped(userId: string, request: Vital.VitalsGlucoseGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedGlucoseResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.cholesterolGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    cholesterolGrouped(userId: string, request: Vital.VitalsCholesterolGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedCholesterolResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.bodyWeightGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    bodyWeightGrouped(userId: string, request: Vital.VitalsBodyWeightGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedBodyWeightResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.bodyFatGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    bodyFatGrouped(userId: string, request: Vital.VitalsBodyFatGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedBodyFatResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.bloodOxygenGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    bloodOxygenGrouped(userId: string, request: Vital.VitalsBloodOxygenGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedBloodOxygenResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.electrocardiogramVoltageGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    electrocardiogramVoltageGrouped(userId: string, request: Vital.VitalsElectrocardiogramVoltageGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedElectrocardiogramVoltageResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.bloodPressureGrouped("user-id", {
     *         startDate: "start-date"
     *     })
     */
    bloodPressureGrouped(userId: string, request: Vital.VitalsBloodPressureGroupedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.GroupedBloodPressureResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.vo2Max("user-id", {
     *         startDate: "start-date"
     *     })
     */
    vo2Max(userId: string, request: Vital.VitalsVo2MaxRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingVo2MaxTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.stressLevel("user-id", {
     *         startDate: "start-date"
     *     })
     */
    stressLevel(userId: string, request: Vital.VitalsStressLevelRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingStressLevelTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.mindfulnessMinutes("user-id", {
     *         startDate: "start-date"
     *     })
     */
    mindfulnessMinutes(userId: string, request: Vital.VitalsMindfulnessMinutesRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingMindfulnessMinutesTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.caffeine("user-id", {
     *         startDate: "start-date"
     *     })
     */
    caffeine(userId: string, request: Vital.VitalsCaffeineRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingCaffeineTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.water("user-id", {
     *         startDate: "start-date"
     *     })
     */
    water(userId: string, request: Vital.VitalsWaterRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingWaterTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.steps("user-id", {
     *         startDate: "start-date"
     *     })
     */
    steps(userId: string, request: Vital.VitalsStepsRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingStepsTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.floorsClimbed("user-id", {
     *         startDate: "start-date"
     *     })
     */
    floorsClimbed(userId: string, request: Vital.VitalsFloorsClimbedRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingFloorsClimbedTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.distance("user-id", {
     *         startDate: "start-date"
     *     })
     */
    distance(userId: string, request: Vital.VitalsDistanceRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingDistanceTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.caloriesBasal("user-id", {
     *         startDate: "start-date"
     *     })
     */
    caloriesBasal(userId: string, request: Vital.VitalsCaloriesBasalRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingCaloriesBasalTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.caloriesActive("user-id", {
     *         startDate: "start-date"
     *     })
     */
    caloriesActive(userId: string, request: Vital.VitalsCaloriesActiveRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingCaloriesActiveTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.respiratoryRate("user-id", {
     *         startDate: "start-date"
     *     })
     */
    respiratoryRate(userId: string, request: Vital.VitalsRespiratoryRateRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingRespiratoryRateTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.ige("user-id", {
     *         startDate: "start-date"
     *     })
     */
    ige(userId: string, request: Vital.VitalsIgeRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingIgeTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.igg("user-id", {
     *         startDate: "start-date"
     *     })
     */
    igg(userId: string, request: Vital.VitalsIggRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingIggTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.hypnogram("user-id", {
     *         startDate: "start-date"
     *     })
     */
    hypnogram(userId: string, request: Vital.VitalsHypnogramRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingHypnogramTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.hrv("user-id", {
     *         startDate: "start-date"
     *     })
     */
    hrv(userId: string, request: Vital.VitalsHrvRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingHrvTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.heartrate("user-id", {
     *         startDate: "start-date"
     *     })
     */
    heartrate(userId: string, request: Vital.VitalsHeartrateRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingHeartRateTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.glucose("user-id", {
     *         startDate: "start-date"
     *     })
     */
    glucose(userId: string, request: Vital.VitalsGlucoseRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingGlucoseTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.cholesterolTriglycerides("user-id", {
     *         startDate: "start-date"
     *     })
     */
    cholesterolTriglycerides(userId: string, request: Vital.VitalsCholesterolTriglyceridesRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingCholesterolTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.cholesterolTotal("user-id", {
     *         startDate: "start-date"
     *     })
     */
    cholesterolTotal(userId: string, request: Vital.VitalsCholesterolTotalRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingCholesterolTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.cholesterolLdl("user-id", {
     *         startDate: "start-date"
     *     })
     */
    cholesterolLdl(userId: string, request: Vital.VitalsCholesterolLdlRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingCholesterolTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.cholesterolHdl("user-id", {
     *         startDate: "start-date"
     *     })
     */
    cholesterolHdl(userId: string, request: Vital.VitalsCholesterolHdlRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingCholesterolTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.cholesterol("user-id", {
     *         startDate: "start-date"
     *     })
     */
    cholesterol(userId: string, request: Vital.VitalsCholesterolRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingCholesterolTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.bodyWeight("user-id", {
     *         startDate: "start-date"
     *     })
     */
    bodyWeight(userId: string, request: Vital.VitalsBodyWeightRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingBodyWeightTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.bodyFat("user-id", {
     *         startDate: "start-date"
     *     })
     */
    bodyFat(userId: string, request: Vital.VitalsBodyFatRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingBodyFatTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.bloodOxygen("user-id", {
     *         startDate: "start-date"
     *     })
     */
    bloodOxygen(userId: string, request: Vital.VitalsBloodOxygenRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingBloodOxygenTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.electrocardiogramVoltage("user-id", {
     *         startDate: "start-date"
     *     })
     */
    electrocardiogramVoltage(userId: string, request: Vital.VitalsElectrocardiogramVoltageRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingElectrocardiogramVoltageTimeseries[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.vitals.bloodPressure("user-id", {
     *         startDate: "start-date"
     *     })
     */
    bloodPressure(userId: string, request: Vital.VitalsBloodPressureRequest, requestOptions?: Vitals.RequestOptions): Promise<Vital.ClientFacingBloodPressureTimeseries[]>;
}
