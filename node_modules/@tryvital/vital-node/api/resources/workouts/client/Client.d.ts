/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vital from "../../..";
export declare namespace Workouts {
    interface Options {
        environment?: core.Supplier<environments.VitalEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Workouts {
    protected readonly _options: Workouts.Options;
    constructor(_options: Workouts.Options);
    /**
     * Get Daily workout for user_id
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.workouts.get("user-id", {
     *         startDate: "start-date"
     *     })
     */
    get(userId: string, request: Vital.WorkoutsGetRequest, requestOptions?: Workouts.RequestOptions): Promise<Vital.ClientWorkoutResponse>;
    /**
     * Get Daily workout for user_id
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.workouts.getRaw("user-id", {
     *         startDate: "start-date"
     *     })
     */
    getRaw(userId: string, request: Vital.WorkoutsGetRawRequest, requestOptions?: Workouts.RequestOptions): Promise<Vital.RawWorkout>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.workouts.getByWorkoutId("workout-id")
     */
    getByWorkoutId(workoutId: string, requestOptions?: Workouts.RequestOptions): Promise<Vital.ClientFacingStream>;
}
