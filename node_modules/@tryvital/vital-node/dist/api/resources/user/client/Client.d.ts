/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vital from "../../..";
export declare namespace User {
    interface Options {
        environment?: core.Supplier<environments.VitalEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class User {
    protected readonly _options: User.Options;
    constructor(_options: User.Options);
    /**
     * GET All users for team.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    getAll(request?: Vital.UserGetAllRequest, requestOptions?: User.RequestOptions): Promise<Vital.PaginatedUsersResponse>;
    /**
     * POST Create a Vital user given a client_user_id and returns the user_id.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    create(request: Vital.UserCreateBody, requestOptions?: User.RequestOptions): Promise<Vital.ClientFacingUserKey>;
    /**
     * GET metrics for team.
     */
    getTeamMetrics(requestOptions?: User.RequestOptions): Promise<Vital.MetricsResult>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     */
    getUserSignInToken(userId: string, requestOptions?: User.RequestOptions): Promise<Vital.UserSignInTokenResponse>;
    /**
     * GET Users connected providers
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.user.getConnectedProviders("user-id")
     */
    getConnectedProviders(userId: string, requestOptions?: User.RequestOptions): Promise<Record<string, Vital.ClientFacingProviderWithStatus[]>>;
    /**
     * GET User details given the user_id.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    get(userId: string, requestOptions?: User.RequestOptions): Promise<Vital.ClientFacingUser>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     */
    delete(userId: string, requestOptions?: User.RequestOptions): Promise<Vital.UserSuccessResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.user.patch("user-id", {})
     */
    patch(userId: string, request?: Vital.UserPatchBody, requestOptions?: User.RequestOptions): Promise<void>;
    /**
     * GET user_id from client_user_id.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    getByClientUserId(clientUserId: string, requestOptions?: User.RequestOptions): Promise<Vital.ClientFacingUser>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     */
    deregisterProvider(userId: string, provider: Vital.Providers, requestOptions?: User.RequestOptions): Promise<Vital.UserSuccessResponse>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     */
    undoDelete(request?: Vital.UserUndoDeleteRequest, requestOptions?: User.RequestOptions): Promise<Vital.UserSuccessResponse>;
    /**
     * Trigger a manual refresh for a specific user
     * @throws {@link Vital.BadRequestError}
     * @throws {@link Vital.UnprocessableEntityError}
     */
    refresh(userId: string, request?: Vital.UserRefreshRequest, requestOptions?: User.RequestOptions): Promise<Vital.UserRefreshSuccessResponse>;
}
