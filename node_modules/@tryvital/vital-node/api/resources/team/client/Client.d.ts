/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vital from "../../..";
export declare namespace Team {
    interface Options {
        environment?: core.Supplier<environments.VitalEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Team {
    protected readonly _options: Team.Options;
    constructor(_options: Team.Options);
    /**
     * Post teams.
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.team.getLinkConfig({})
     */
    getLinkConfig(request?: Vital.TeamGetLinkConfigRequest, requestOptions?: Team.RequestOptions): Promise<Record<string, unknown>>;
    /**
     * Get team.
     * @throws {@link Vital.UnprocessableEntityError}
     */
    get(teamId: string, requestOptions?: Team.RequestOptions): Promise<Vital.ClientFacingTeam>;
    /**
     * Search team users by user_id
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.team.getUserById({})
     */
    getUserById(request?: Vital.TeamGetUserByIdRequest, requestOptions?: Team.RequestOptions): Promise<Vital.ClientFacingUser[]>;
    getSvixUrl(requestOptions?: Team.RequestOptions): Promise<Record<string, unknown>>;
    /**
     * GET source priorities.
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.team.getSourcePriorities({})
     */
    getSourcePriorities(request?: Vital.TeamGetSourcePrioritiesRequest, requestOptions?: Team.RequestOptions): Promise<Record<string, unknown>[]>;
    /**
     * Patch source priorities.
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.team.updateSourcePriorities({
     *         teamId: "team-id"
     *     })
     */
    updateSourcePriorities(request: Vital.TeamUpdateSourcePrioritiesRequest, requestOptions?: Team.RequestOptions): Promise<Record<string, unknown>[]>;
    /**
     * @throws {@link Vital.UnprocessableEntityError}
     *
     * @example
     *     await vital.team.getPhysicians("team-id")
     */
    getPhysicians(teamId: string, requestOptions?: Team.RequestOptions): Promise<Vital.ClientFacingPhysician[]>;
}
