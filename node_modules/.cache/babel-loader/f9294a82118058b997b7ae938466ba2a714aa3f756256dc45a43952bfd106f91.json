{"ast":null,"code":"\"use strict\";\n\n/**\n * This file was auto-generated by Fern from our API Definition.\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Vitals = void 0;\nconst environments = __importStar(require(\"../../../../environments\"));\nconst core = __importStar(require(\"../../../../core\"));\nconst Vital = __importStar(require(\"../../..\"));\nconst url_join_1 = __importDefault(require(\"url-join\"));\nconst serializers = __importStar(require(\"../../../../serialization\"));\nconst errors = __importStar(require(\"../../../../errors\"));\nclass Vitals {\n  constructor(_options) {\n    this._options = _options;\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.vo2MaxGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  vo2MaxGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/vo2_max/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedVo2MaxResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.stressLevelGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  stressLevelGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/stress_level/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedStressLevelResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.mindfulnessMinutesGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  mindfulnessMinutesGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/mindfulness_minutes/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedMindfulnessMinutesResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.caffeineGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  caffeineGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/caffeine/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedCaffeineResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.waterGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  waterGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/water/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedWaterResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.stepsGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  stepsGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/steps/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedStepsResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.floorsClimbedGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  floorsClimbedGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/floors_climbed/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedFloorsClimbedResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.distanceGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  distanceGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/distance/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedDistanceResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.caloriesBasalGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  caloriesBasalGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/calories_basal/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedCaloriesBasalResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.caloriesActiveGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  caloriesActiveGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/calories_active/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedCaloriesActiveResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.respiratoryRateGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  respiratoryRateGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/respiratory_rate/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedRespiratoryRateResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.igeGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  igeGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/ige/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedIgeResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.iggGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  iggGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/igg/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedIggResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.hypnogramGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  hypnogramGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/hypnogram/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedHypnogramResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.hrvGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  hrvGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/hrv/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedHrvResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.heartrateGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  heartrateGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/heartrate/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedHeartRateResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.glucoseGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  glucoseGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/glucose/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedGlucoseResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.cholesterolGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  cholesterolGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/cholesterol/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedCholesterolResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.bodyWeightGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  bodyWeightGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/body_weight/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedBodyWeightResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.bodyFatGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  bodyFatGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/body_fat/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedBodyFatResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.bloodOxygenGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  bloodOxygenGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/blood_oxygen/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedBloodOxygenResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.electrocardiogramVoltageGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  electrocardiogramVoltageGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/electrocardiogram_voltage/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedElectrocardiogramVoltageResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.bloodPressureGrouped(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  bloodPressureGrouped(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        cursor,\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (cursor != null) {\n        _queryParams[\"cursor\"] = cursor;\n      }\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/blood_pressure/grouped`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.GroupedBloodPressureResponse.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.vo2Max(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  vo2Max(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/vo2_max`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.vo2Max.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.stressLevel(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  stressLevel(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/stress_level`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.stressLevel.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.mindfulnessMinutes(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  mindfulnessMinutes(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/mindfulness_minutes`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.mindfulnessMinutes.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.caffeine(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  caffeine(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/caffeine`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.caffeine.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.water(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  water(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/water`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.water.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.steps(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  steps(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/steps`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.steps.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.floorsClimbed(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  floorsClimbed(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/floors_climbed`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.floorsClimbed.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.distance(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  distance(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/distance`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.distance.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.caloriesBasal(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  caloriesBasal(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/calories_basal`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.caloriesBasal.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.caloriesActive(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  caloriesActive(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/calories_active`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.caloriesActive.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.respiratoryRate(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  respiratoryRate(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/respiratory_rate`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.respiratoryRate.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.ige(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  ige(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/ige`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.ige.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.igg(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  igg(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/igg`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.igg.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.hypnogram(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  hypnogram(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/hypnogram`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.hypnogram.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.hrv(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  hrv(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/hrv`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.hrv.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.heartrate(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  heartrate(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/heartrate`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.heartrate.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.glucose(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  glucose(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/glucose`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.glucose.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.cholesterolTriglycerides(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  cholesterolTriglycerides(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/cholesterol/triglycerides`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.cholesterolTriglycerides.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.cholesterolTotal(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  cholesterolTotal(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/cholesterol/total`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.cholesterolTotal.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.cholesterolLdl(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  cholesterolLdl(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/cholesterol/ldl`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.cholesterolLdl.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.cholesterolHdl(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  cholesterolHdl(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/cholesterol/hdl`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.cholesterolHdl.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.cholesterol(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  cholesterol(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/cholesterol`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.cholesterol.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.bodyWeight(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  bodyWeight(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/body_weight`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.bodyWeight.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.bodyFat(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  bodyFat(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/body_fat`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.bodyFat.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.bloodOxygen(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  bloodOxygen(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/blood_oxygen`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.bloodOxygen.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.electrocardiogramVoltage(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  electrocardiogramVoltage(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/electrocardiogram_voltage`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.electrocardiogramVoltage.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n  /**\n   * @throws {@link Vital.UnprocessableEntityError}\n   *\n   * @example\n   *     await vital.vitals.bloodPressure(\"user-id\", {\n   *         startDate: \"start-date\"\n   *     })\n   */\n  bloodPressure(userId, request, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        provider,\n        startDate,\n        endDate\n      } = request;\n      const _queryParams = {};\n      if (provider != null) {\n        _queryParams[\"provider\"] = provider;\n      }\n      _queryParams[\"start_date\"] = startDate;\n      if (endDate != null) {\n        _queryParams[\"end_date\"] = endDate;\n      }\n      const _response = yield core.fetcher({\n        url: (0, url_join_1.default)((_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/blood_pressure`),\n        method: \"GET\",\n        headers: {\n          \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n          \"X-Fern-Language\": \"JavaScript\",\n          \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n          \"X-Fern-SDK-Version\": \"3.1.2\"\n        },\n        contentType: \"application/json\",\n        queryParameters: _queryParams,\n        timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n        maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries\n      });\n      if (_response.ok) {\n        return yield serializers.vitals.bloodPressure.Response.parseOrThrow(_response.body, {\n          unrecognizedObjectKeys: \"passthrough\",\n          allowUnrecognizedUnionMembers: true,\n          allowUnrecognizedEnumValues: true,\n          breadcrumbsPrefix: [\"response\"]\n        });\n      }\n      if (_response.error.reason === \"status-code\") {\n        switch (_response.error.statusCode) {\n          case 422:\n            throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n              unrecognizedObjectKeys: \"passthrough\",\n              allowUnrecognizedUnionMembers: true,\n              allowUnrecognizedEnumValues: true,\n              breadcrumbsPrefix: [\"response\"]\n            }));\n          default:\n            throw new errors.VitalError({\n              statusCode: _response.error.statusCode,\n              body: _response.error.body\n            });\n        }\n      }\n      switch (_response.error.reason) {\n        case \"non-json\":\n          throw new errors.VitalError({\n            statusCode: _response.error.statusCode,\n            body: _response.error.rawBody\n          });\n        case \"timeout\":\n          throw new errors.VitalTimeoutError();\n        case \"unknown\":\n          throw new errors.VitalError({\n            message: _response.error.errorMessage\n          });\n      }\n    });\n  }\n}\nexports.Vitals = Vitals;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__awaiter","thisArg","_arguments","P","generator","adopt","resolve","Promise","reject","fulfilled","step","next","e","rejected","done","then","apply","__importDefault","exports","Vitals","environments","require","core","Vital","url_join_1","serializers","errors","constructor","_options","vo2MaxGrouped","userId","request","requestOptions","_a","cursor","provider","startDate","endDate","_queryParams","_response","fetcher","url","default","Supplier","environment","VitalEnvironment","Production","method","headers","apiKey","contentType","queryParameters","timeoutMs","timeoutInSeconds","maxRetries","ok","GroupedVo2MaxResponse","parseOrThrow","body","unrecognizedObjectKeys","allowUnrecognizedUnionMembers","allowUnrecognizedEnumValues","breadcrumbsPrefix","error","reason","statusCode","UnprocessableEntityError","HttpValidationError","VitalError","rawBody","VitalTimeoutError","message","errorMessage","stressLevelGrouped","GroupedStressLevelResponse","mindfulnessMinutesGrouped","GroupedMindfulnessMinutesResponse","caffeineGrouped","GroupedCaffeineResponse","waterGrouped","GroupedWaterResponse","stepsGrouped","GroupedStepsResponse","floorsClimbedGrouped","GroupedFloorsClimbedResponse","distanceGrouped","GroupedDistanceResponse","caloriesBasalGrouped","GroupedCaloriesBasalResponse","caloriesActiveGrouped","GroupedCaloriesActiveResponse","respiratoryRateGrouped","GroupedRespiratoryRateResponse","igeGrouped","GroupedIgeResponse","iggGrouped","GroupedIggResponse","hypnogramGrouped","GroupedHypnogramResponse","hrvGrouped","GroupedHrvResponse","heartrateGrouped","GroupedHeartRateResponse","glucoseGrouped","GroupedGlucoseResponse","cholesterolGrouped","GroupedCholesterolResponse","bodyWeightGrouped","GroupedBodyWeightResponse","bodyFatGrouped","GroupedBodyFatResponse","bloodOxygenGrouped","GroupedBloodOxygenResponse","electrocardiogramVoltageGrouped","GroupedElectrocardiogramVoltageResponse","bloodPressureGrouped","GroupedBloodPressureResponse","vo2Max","vitals","Response","stressLevel","mindfulnessMinutes","caffeine","water","steps","floorsClimbed","distance","caloriesBasal","caloriesActive","respiratoryRate","ige","igg","hypnogram","hrv","heartrate","glucose","cholesterolTriglycerides","cholesterolTotal","cholesterolLdl","cholesterolHdl","cholesterol","bodyWeight","bodyFat","bloodOxygen","electrocardiogramVoltage","bloodPressure"],"sources":["/Users/tangwenhua/Desktop/dsc180-product/dashboard-website/node_modules/@tryvital/vital-node/api/resources/vitals/client/Client.js"],"sourcesContent":["\"use strict\";\n/**\n * This file was auto-generated by Fern from our API Definition.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Vitals = void 0;\nconst environments = __importStar(require(\"../../../../environments\"));\nconst core = __importStar(require(\"../../../../core\"));\nconst Vital = __importStar(require(\"../../..\"));\nconst url_join_1 = __importDefault(require(\"url-join\"));\nconst serializers = __importStar(require(\"../../../../serialization\"));\nconst errors = __importStar(require(\"../../../../errors\"));\nclass Vitals {\n    constructor(_options) {\n        this._options = _options;\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.vo2MaxGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    vo2MaxGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/vo2_max/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedVo2MaxResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.stressLevelGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    stressLevelGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/stress_level/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedStressLevelResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.mindfulnessMinutesGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    mindfulnessMinutesGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/mindfulness_minutes/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedMindfulnessMinutesResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.caffeineGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    caffeineGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/caffeine/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedCaffeineResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.waterGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    waterGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/water/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedWaterResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.stepsGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    stepsGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/steps/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedStepsResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.floorsClimbedGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    floorsClimbedGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/floors_climbed/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedFloorsClimbedResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.distanceGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    distanceGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/distance/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedDistanceResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.caloriesBasalGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    caloriesBasalGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/calories_basal/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedCaloriesBasalResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.caloriesActiveGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    caloriesActiveGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/calories_active/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedCaloriesActiveResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.respiratoryRateGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    respiratoryRateGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/respiratory_rate/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedRespiratoryRateResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.igeGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    igeGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/ige/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedIgeResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.iggGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    iggGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/igg/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedIggResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.hypnogramGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    hypnogramGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/hypnogram/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedHypnogramResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.hrvGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    hrvGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/hrv/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedHrvResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.heartrateGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    heartrateGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/heartrate/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedHeartRateResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.glucoseGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    glucoseGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/glucose/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedGlucoseResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.cholesterolGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    cholesterolGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/cholesterol/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedCholesterolResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.bodyWeightGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    bodyWeightGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/body_weight/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedBodyWeightResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.bodyFatGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    bodyFatGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/body_fat/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedBodyFatResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.bloodOxygenGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    bloodOxygenGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/blood_oxygen/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedBloodOxygenResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.electrocardiogramVoltageGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    electrocardiogramVoltageGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/electrocardiogram_voltage/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedElectrocardiogramVoltageResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.bloodPressureGrouped(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    bloodPressureGrouped(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { cursor, provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (cursor != null) {\n                _queryParams[\"cursor\"] = cursor;\n            }\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/blood_pressure/grouped`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.GroupedBloodPressureResponse.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.vo2Max(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    vo2Max(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/vo2_max`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.vo2Max.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.stressLevel(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    stressLevel(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/stress_level`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.stressLevel.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.mindfulnessMinutes(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    mindfulnessMinutes(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/mindfulness_minutes`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.mindfulnessMinutes.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.caffeine(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    caffeine(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/caffeine`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.caffeine.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.water(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    water(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/water`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.water.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.steps(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    steps(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/steps`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.steps.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.floorsClimbed(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    floorsClimbed(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/floors_climbed`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.floorsClimbed.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.distance(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    distance(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/distance`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.distance.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.caloriesBasal(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    caloriesBasal(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/calories_basal`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.caloriesBasal.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.caloriesActive(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    caloriesActive(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/calories_active`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.caloriesActive.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.respiratoryRate(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    respiratoryRate(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/respiratory_rate`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.respiratoryRate.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.ige(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    ige(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/ige`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.ige.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.igg(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    igg(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/igg`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.igg.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.hypnogram(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    hypnogram(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/hypnogram`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.hypnogram.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.hrv(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    hrv(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/hrv`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.hrv.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.heartrate(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    heartrate(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/heartrate`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.heartrate.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.glucose(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    glucose(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/glucose`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.glucose.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.cholesterolTriglycerides(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    cholesterolTriglycerides(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/cholesterol/triglycerides`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.cholesterolTriglycerides.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.cholesterolTotal(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    cholesterolTotal(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/cholesterol/total`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.cholesterolTotal.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.cholesterolLdl(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    cholesterolLdl(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/cholesterol/ldl`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.cholesterolLdl.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.cholesterolHdl(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    cholesterolHdl(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/cholesterol/hdl`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.cholesterolHdl.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.cholesterol(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    cholesterol(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/cholesterol`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.cholesterol.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.bodyWeight(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    bodyWeight(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/body_weight`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.bodyWeight.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.bodyFat(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    bodyFat(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/body_fat`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.bodyFat.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.bloodOxygen(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    bloodOxygen(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/blood_oxygen`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.bloodOxygen.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.electrocardiogramVoltage(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    electrocardiogramVoltage(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/electrocardiogram_voltage`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.electrocardiogramVoltage.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n    /**\n     * @throws {@link Vital.UnprocessableEntityError}\n     *\n     * @example\n     *     await vital.vitals.bloodPressure(\"user-id\", {\n     *         startDate: \"start-date\"\n     *     })\n     */\n    bloodPressure(userId, request, requestOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { provider, startDate, endDate } = request;\n            const _queryParams = {};\n            if (provider != null) {\n                _queryParams[\"provider\"] = provider;\n            }\n            _queryParams[\"start_date\"] = startDate;\n            if (endDate != null) {\n                _queryParams[\"end_date\"] = endDate;\n            }\n            const _response = yield core.fetcher({\n                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.VitalEnvironment.Production, `v2/timeseries/${userId}/blood_pressure`),\n                method: \"GET\",\n                headers: {\n                    \"x-vital-api-key\": yield core.Supplier.get(this._options.apiKey),\n                    \"X-Fern-Language\": \"JavaScript\",\n                    \"X-Fern-SDK-Name\": \"@tryvital/vital-node\",\n                    \"X-Fern-SDK-Version\": \"3.1.2\",\n                },\n                contentType: \"application/json\",\n                queryParameters: _queryParams,\n                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,\n                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,\n            });\n            if (_response.ok) {\n                return yield serializers.vitals.bloodPressure.Response.parseOrThrow(_response.body, {\n                    unrecognizedObjectKeys: \"passthrough\",\n                    allowUnrecognizedUnionMembers: true,\n                    allowUnrecognizedEnumValues: true,\n                    breadcrumbsPrefix: [\"response\"],\n                });\n            }\n            if (_response.error.reason === \"status-code\") {\n                switch (_response.error.statusCode) {\n                    case 422:\n                        throw new Vital.UnprocessableEntityError(yield serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                            unrecognizedObjectKeys: \"passthrough\",\n                            allowUnrecognizedUnionMembers: true,\n                            allowUnrecognizedEnumValues: true,\n                            breadcrumbsPrefix: [\"response\"],\n                        }));\n                    default:\n                        throw new errors.VitalError({\n                            statusCode: _response.error.statusCode,\n                            body: _response.error.body,\n                        });\n                }\n            }\n            switch (_response.error.reason) {\n                case \"non-json\":\n                    throw new errors.VitalError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.rawBody,\n                    });\n                case \"timeout\":\n                    throw new errors.VitalTimeoutError();\n                case \"unknown\":\n                    throw new errors.VitalError({\n                        message: _response.error.errorMessage,\n                    });\n            }\n        });\n    }\n}\nexports.Vitals = Vitals;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}